

#+TITLE: Scientific computing

* Installing python from source

Install dependencies (opensuse) (for other platforms, see: [[https://docs.rstudio.com/resources/install-python-source/][link]])

#+begin_src bash
sudo zypper install \
    automake \
    fdupes \
    gcc \
    gcc-c++ \
    gcc-fortran \
    gdbm-devel \
    gettext-tools \
    gmp-devel \
    intltool \
    libbz2-devel \
    libexpat-devel \
    libffi-devel \
    libnsl-devel \
    lzma-devel \
    make \
    ncurses-devel \
    netcfg \
    openssl-devel \
    pkgconfig \
    readline-devel \
    sqlite-devel \
    xz \
    zlib-devel
#+end_src


Download python source
#+begin_src bash
wget https://www.python.org/ftp/python/3.10.4/Python-3.10.4.tgz
#+end_src

Unpack
#+begin_src bash
tar zxvf Python-3.10.4.tgz
#+end_src

Compile (using 4 cores) and install
#+begin_src bash
cd Python-3.10.4/
./configure --enable-optimizations --enable-shared
make -j 4
sudo make install
#+end_src

Link libraries (bugfix)
#+begin_src bash
sudo ln -s /usr/local/lib64/python3.10/lib-dynload/ /usr/local/lib/python3.10/lib-dynload
#+end_src

setup virtual env: [[https://docs.python.org/3/library/venv.html][docs]] 

Best is to enable system-site-packages for dependencies that can not be installed via pip (i.e., that need a system package manager like apt-get, or conda). For example, the graph-tool package. 

#+begin_src bash
python3.11 -m venv /Users/windels/venvs/venvGCM --system-site-packages --upgrade-deps
#+end_src

To launch the virtual environment, add the following alias to your .zshrc file :

#+begin_src bash
alias venvGCM='source ~/venvs/venvGCM/bin/activate'
#+end_src


* Working remote
** Logging in via the command line with SSH
To log in with the user /bscuser/ on the remote node /mn1/, run:
#+begin_src bash
 ssh bscuser@mn1.bsc.es 
#+end_src
You will be prompted for your password.

Note that the node mn1 is publicly accessible (i.e., via the
internet). If the machine is only available on the intranet, you will
have to enable your VPN first.

** Avoiding passwords

It is cumbersome to have to have to enter your password each time you ssh into a remote machine. 

To avoid this, we will generate a ssh key pair, which consists of a private (under ~/.ssh/id_rsa, by default) and public key (under ~/.ssh/id_rsa.pub, by default):

On your local machine run:
#+begin_src bash
  ssh-keygen
#+end_src

To copy the accepted private key to the remote machine (here mn1) run:
#+begin_src bash
ssh-copy-id  -i .ssh/id_rsa bscuser@mn1.bsc.es 
#+end_src

From now on, whenever we ssh into the remote machine, instead of being prompted for the password, we automatically offer the public id_rsa.pub file, which well be checked by the host to correspond (via a hash function) to the copied private id_rsa file. 

** Machine aliases

It is cumbersome to have to enter your username and the host address each time you want to ssh into the remote machine. 
To avoid this, we will create an alias. 

On the local machine, in the file '.ssh/config', add the following lines:

#+begin_src bash
Host mn1
	HostName mn1.bsc.es
	User bscuser
     	IdentityFile ~/.ssh/id_rsa
#+end_src

To make your shell aware of this new configuration, run:
#+begin_src bash
  source .ssh/config
#+end_src

You can now ssh into the node mn1 running:
#+begin_src bash
  ssh mn1
#+end_src

** Window forwarding

Sometimes, you want to have access to the GUI of the remote machine. We do so through X11 window forwarding. To enable this, simply SSH into the remote machine using the -X flag:

#+begin_src bash
  ssh -X mn1
#+end_src

Note that for this to work, you need to have an X window server running on the local machine. To check if this is the case, run:
#+begin_src bash
  echo $DISPLAY
#+end_src
Run this same command on the remote machine. If both these variable are set (i.e., echo returns a non-empty string), you should be good to go.

Note that in the case you are using MacOS as a local machine, you need to install the X window server (XQuartz) on the local machine first ([[https://www.cyberciti.biz/faq/apple-osx-mountain-lion-mavericks-install-xquartz-server/][link]]). 



* HPC

cluster documentation: https://www.bsc.es/supportkc/

available environments:
#+begin_src bash
module avail
#+end_src

load environment:
#+begin_src bash
 module  load <module name>
#+end_src

For instance:
#+begin_src bash
 module load python/3.10.2
#+end_src

* GIT

[[https://github.com/github/gitignore][Gitignore templates]]
Adding github as a known host
#+begin_src bash
 ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
#+end_src





* SMELS

* visualisation

** Testing and debugging

* Profiling

* Package for distribution

** Parallel computing

* Cluster submission

* Reproducible computing (see rougier)

* Python best practices

- fstreams (readability)
- assert statements (avoid unnoticed bugs/avoid hard to trace bugs)
- def main() (avoid global variables)
- top 25 noob habbits you need to ditch: https://www.youtube.com/watch?v=qUeud6DvOWI


* References;

Tutorial on scientific computing:
https://aspp.school/wiki/archives
Tutorial on computer graphics:
https://www.scratchapixel.com/
